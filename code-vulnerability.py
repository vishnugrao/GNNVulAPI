from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("code-vulnerability")

GNNAPIBASE = "https://vishnugrao--c-code-analyzer-orchestrator.modal.run"
USER_AGENT = "code-vulnerability-app"

async def make_gnn_request(url: str, c_code: str) -> dict[str, Any] | None:
    """Make a request to the GNN API with proper error handling"""
    headers = {
        "User-Agent": USER_AGENT,
        "Accept": "application/json"
    }
    async with httpx.AsyncClient() as client:
        try:
            data = {
                "c_code": c_code
            }
            response = await client.post(url, headers=headers, json=data, timeout=60.0)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None
    
def format_prediction(prediction: dict) -> str:
    """Format a vulnerability prediction into a readable string."""
    return f"""
        Analysis Results:
            Predicte Common Weakness Enumeration (CWE): {prediction['predicted_cwe']}
            Confidence: {prediction['confidence']:.2f}
    """

@mcp.tool()
async def check_vulnerability(c_code: str) -> str:
    """ Check which vulnerability is most likely present in snippet of C code given as a multiline string that can compile self-sufficiently.
        Args:
            c_code: Code in the C programming language that compiles (eg. #include <stdio.h>
#include <string.h>

#define SRC_STR "0123456789abcdef0123456789abcde" // 32 chars including null terminator

typedef struct _charVoid
{
    char charFirst[16];
    void *voidSecond;
    void *voidThird;
} charVoid;

int main()
{
    charVoid structCharVoid;
    structCharVoid.voidSecond = (void *)SRC_STR;

    puts((char *)structCharVoid.voidSecond);

    // Vulnerability: Overwrites memory beyond charFirst, corrupting voidSecond and voidThird
    memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));

    structCharVoid.charFirst[15] = '\0'; // null-terminate

    puts(structCharVoid.charFirst);          // prints truncated string
    puts((char *)structCharVoid.voidSecond); // likely corrupted

    return 0;
}

// EOF ) 
    """

    url = f"{GNNAPIBASE}"
    data = await make_gnn_request(url, c_code=c_code)

    if not data or "predicted_cwe" not in data or "confidence" not in data:
        return "Unable to fetch the vulnerability that's most likely present in this code"
    
    return format_prediction(data)

if __name__ == "__main__":
    mcp.run(transport="stdio")

